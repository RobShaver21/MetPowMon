clearvars; close all; clc;

%% Settings

ProfileId=4;        % 1=VFL 2=Hockey 3=EHF 4=HoNaMa

loadSettings()

%% import
import matlab.net.*
import matlab.net.http.*

%% Auth

if isfile('auth.mat')
    load auth.mat
end

% Client-Id & Secret, generated by Polar upon registration
load client.mat

redirect_uri='http://localhost:5000/oauth2_callback';
%% Authorization
% Checks if refresh_token was issued for refresh_token-flow -> no code needed
if exist('refresh_token','var')==1
    method='POST';
    auth=['Basic ' matlab.net.base64encode([client.id ':' client.secret])];
    Content_Type='application/x-www-form-urlencoded';
    data = [...
        'grant_type=', 'refresh_token',...
        '&refresh_token=', refresh_token...
        ];
    header=matlab.net.http.HeaderField(...
        'Authorization',auth,...
        'Content-Type',Content_Type...
        );
    request = matlab.net.http.RequestMessage(method,header,data);
    uri = matlab.net.URI(...
        'https://auth.polar.com/oauth/token'...
        );
    response=send(request,uri);
end
% If refresh_token was not issued or request was not successful,
% acces_token flow with code from callback uri is used
if exist('refresh_token','var')==0 || response.StatusCode ~=200
    % URL redirects back to authorization callback domain with code valid for
    % 12 h
    url=[...
        'https://auth.polar.com/oauth/authorize?client.id='...
        client.id '&response_type=code&scope=team_read'...
        ];
    web(url);
    prompt = {'Enter Code'};
    dlgtitle = 'Input';
    dims = [1 35];
    answer = inputdlg(prompt,dlgtitle,dims);
    code=char(answer);
    %Send Post request for token
    method='POST';
    auth=['Basic ' matlab.net.base64encode([client.id ':' client.secret])];
    Content_Type='application/x-www-form-urlencoded';
    data = [...
        'grant_type=', 'authorization_code',...
        '&code=', code...
        ];
    header=matlab.net.http.HeaderField(...
        'Authorization',auth,...
        'Content-Type',Content_Type...
        );
    request = matlab.net.http.RequestMessage(method,header,data);
    uri = matlab.net.URI(...
        'https://auth.polar.com/oauth/token'...
        );
    response=send(request,uri);
    refresh_token=response.Body.Data.refresh_token;
end
access_token=response.Body.Data.access_token;
save('auth.mat','refresh_token');
%% Get Data

%GET request for Data acquisition
teammethod='GET';
teamheader = matlab.net.http.HeaderField(...
    'Accept','application/json',...
    'Authorization', ['Bearer ', access_token]...
    );
%% Get Team_id
teamurl=...
    'https://teampro.api.polar.com/v1/teams'...
    ;
datarequest=matlab.net.http.RequestMessage(teammethod,teamheader);
teamresponse=send(datarequest,teamurl);
%Team_id for every team, Profile for team selection, Danas Hockey = 2
team_id=teamresponse.Body.Data.data;
profile=1;
team_select=team_id(profile).id;
%% Get team details
detailurl=[...
    'https://teampro.api.polar.com/v1/teams/' team_select...
    ];
detailresponse=send(datarequest,detailurl);
% Players of team, including staff
players=detailresponse.Body.Data.data.players;
%% Get team training Sessions
NrPage=0;
NrPerPage=100;
paginationQuery=['?page=' num2str(NrPage) '&per_page=', num2str(NrPerPage)];
perpage='?per_page=100';
teamsessionsurl=[...
    'https://teampro.api.polar.com/v1/teams/'...
    team_select '/training_sessions'...
    ];
teamsessionresponse=send(datarequest,[teamsessionsurl, paginationQuery]);
NrPages=teamsessionresponse.Body.Data.page.total_pages;

AllSessions=teamsessionresponse.Body.Data.data;
for i=1:NrPages-1
    NrPage=num2str(i);
    paginationQuery=['?page=' num2str(NrPage) '&per_page=', num2str(NrPerPage)];
    AppSessionsResponse=send(datarequest,[teamsessionsurl, paginationQuery]);
    AllSessions=[AllSessions; AppSessionsResponse.Body.Data.data];
end

failure = struct('player_id', {},'player_session_id', {},'session_id', {}, 'err', {});

% remove empty fields, get session id
% teamsessions=teamsessionresponse.Body.Data.data(...
%     ~isempty(teamsessionresponse.Body.Data.data.name));

% gamesession_log=strcmp({teamsessionresponse.Body.Data.data.type}','TRAINING');
% gamesession_id=teamsessionresponse.Body.Data.data(gamesession_log);

%% Session Loop

for a=1:length(AllSessions)
    session_id=AllSessions(a).id;
    
    teamsessionurl=[...
        'https://teampro.api.polar.com/v1/teams/training_sessions/'...
        session_id];
    session_detail=send(datarequest,teamsessionurl);
    
    participants=session_detail.Body.Data.data.participants;
    outvarnames={...
        'Datum','ID','Nachname','Vorname','SpielerNr','Beginn','Ende',...
        'Dauer','markers','Daten'
        };
    
    c=cell(size(outvarnames))';
    
    Dout=cell2struct(c,outvarnames);
    
    playerout=cell(length(participants),width(outvarnames));
    datum=datetime(...
        session_detail.Body.Data.data.start_time,...
        'InputFormat', 'uuuu-MM-dd''T''HH:mm:ss'...
        );
    
    %% Player-Loop
    for ply=1:length(participants)
        try
            
            %% Get player training session
            player_id=participants(ply).player_id;
            player_session_id=session_detail.Body.Data.data.participants(ply).player_session_id;
            %%  Get sample-data
            sampleurl=[...
                'https://teampro.api.polar.com/v1/training_sessions/' player_session_id ...
                '/?samples=all'...
                ];
            sampleresponse=send(datarequest, sampleurl);
            %% Generate Output
            Dout(ply).Datum=datum;
            Dout(ply).ID=player_id;
            
            sensor_data=[sampleresponse.Body.Data.data.samples.values{:,:}]';
            sensor_name=[sampleresponse.Body.Data.data.samples.fields];
            
            ind=cellfun(@isempty,sensor_data);
            sensor_data(ind)={nan};
            
            ind = cellfun(@(c) ischar(c) && ~isempty(strfind(c, 'NaN')), sensor_data);
            sensor_data(ind)={nan};
            
            T=cell2table(sensor_data);
            T.Properties.VariableNames=sensor_name;
            
            time=[0:seconds(0.1):seconds((height(T)-1)/10)]';
            T.time=time;
            TT=table2timetable(T);
            
            Dout(ply).Daten=TT;
            
            %%
            
            index=strcmp(player_id,{players.player_id});
            
            if sum(index) > 0
                Dout(ply).Nachname=players(index).last_name;
                Dout(ply).Vorname=players(index).first_name;
                Dout(ply).SpielerNr=players(index).player_number;
            end
            
            start_time=datetime(...
                sampleresponse.Body.Data.data.start_time,...
                'InputFormat', 'uuuu-MM-dd''T''HH:mm:ss'...
                );
            start_time.Format='HH:mm:ss';
            
            Dout(ply).Beginn=start_time;
            
            end_time=datetime(...
                sampleresponse.Body.Data.data.stop_time,...
                'InputFormat', 'uuuu-MM-dd''T''HH:mm:ss'...
                );
            end_time.Format='HH:mm:ss';
            
            Dout(ply).Ende=start_time;
            Dout(ply).Dauer=end_time-start_time;
            Dout(ply).markers=session_detail.Body.Data.data.markers;
            
        catch ME
            failure(end + 1).player_id = player_id;
            failure(end).player_session__id = player_session_id;
            failure(end).session_id = session_id;
            failure(end).err  = getReport(ME);
        end
        
    end
    
    % Output
    filename=[char(RootF) '\API\' datestr(datum,'yyyy_mm_dd_HH_MM_SS'),'.mat'];
    save (filename,'Dout');
    
end

errlabel=[char(RootF) '\API\error\Error_' datestr(now,'yyyy_mm_dd_HH_MM_SS') '.mat'];
save(errlabel,'failure');

% clearvars -except dataout
